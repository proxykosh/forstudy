# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from google.oauth2 import service_account
from googleapiclient.http import MediaIoBaseDownload,MediaFileUpload
from googleapiclient.discovery import build
import pprint
import io
import psycopg2
import pandas as pd


class Ui_MainWindow(object):
    token_path = 'C:\\Users\\niash\\Downloads\\ace-computer-335712-d23816e20174.json'
    file_id = '1ldhz6qv7KmXWV4xRdYjNuwZ3GGlI_oHc'

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1008, 337)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(0, 260, 1001, 531))
        self.tableView.setObjectName("tableView")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(420, 0, 331, 71))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(30, 90, 251, 31))
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(300, 90, 111, 31))
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 55, 241, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(30, 170, 251, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(100, 140, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(300, 170, 111, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(450, 90, 181, 121))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(680, 100, 311, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(680, 130, 271, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(680, 160, 271, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1008, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.textEdit_2.setText(self.file_id)
        self.textEdit.setText((self.token_path))

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.textEdit_2.setVisible(False)
        self.pushButton_2.setVisible(False)
        self.tableView.setVisible(False)
        self.pushButton_3.setVisible(False)
        self.label_3.setVisible(False)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Тестовое задание"))
        self.pushButton.setText(_translate("MainWindow", "Указать путь"))
        self.label_2.setText(_translate("MainWindow", "Ввод пути к токену авторизации"))
        self.label_3.setText(_translate("MainWindow", "Ввод ID файла"))
        self.pushButton_2.setText(_translate("MainWindow", "Указать ID файла"))
        self.pushButton_3.setText(_translate("MainWindow", "Показать таблицу"))
        self.label_4.setText(_translate("MainWindow", "Путь к токену авторизации указан: нет"))
        self.label_5.setText(_translate("MainWindow", "ID файла указан: нет"))
        self.label_6.setText(_translate("MainWindow", "Таблица выведена: нет"))

    def add_functions(self):
        self.pushButton.clicked.connect(lambda: self.import_token_path())
        self.pushButton_2.clicked.connect(lambda: self.import_file_id1())
        self.pushButton_3.clicked.connect(lambda: self.algorithm())



    def import_token_path(self):
        self.token_path = self.textEdit.toPlainText().replace('/', '//')
        self.label_4.setText("Путь к токену авторизации указан: да")
        self.textEdit_2.setVisible(True)
        self.pushButton_2.setVisible(True)
        self.label_3.setVisible(True)


    def import_file_id1(self):
        self.file_id = self.textEdit_2.toPlainText()
        self.label_5.setText("ID файла указан: да")

        self.pushButton_3.setVisible(True)


    def algorithm(self):
        self.tableView.setVisible(True)
        MainWindow.resize(1008, 837)
        self.label_6.setText("Таблица выведена: да")
        pp = pprint.PrettyPrinter(indent=4)
        SCOPES = ['https://www.googleapis.com/auth/drive']
        SERVICE_ACCOUNT_FILE = self.token_path

        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        service = build('drive', 'v3', credentials=credentials)

        file_id = self.file_id
        request = service.files().get_media(fileId=file_id)
        filename = 'C:\\Users\\niash\\OneDrive\\Desktop\\test.csv'
        fh = io.FileIO(filename, 'wb')
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print("Download %d%%." % int(status.progress() * 100))

        print("File has been downloaded")

        df = pd.read_excel("C:\\Users\\niash\\OneDrive\\Desktop\\test.csv", encoding="UTF-8")
        df = df.dropna(how='all', axis=0)
        del df['Unnamed: 5']
        conn = psycopg2.connect(database="test", user="postgres", password="admin", port=5432)
        cursor = conn.cursor()
        try:
            cursor.execute("DROP TABLE test;")
        except:
            print("Table was not created yet")
        conn.commit()
        cursor.close()
        conn.close()
        conn = psycopg2.connect(database="test", user="postgres", password="admin", port=5432)
        cursor = conn.cursor()
        cursor.execute("CREATE TABLE test ();")
        for name in tuple(df.columns):
            cursor.execute(f'ALTER TABLE test ADD "' + str(name) + '" VARCHAR(50) NOT NULL;')
        for count in range(list(df.shape)[0]):
            values = ''
            for data in df.iloc[count].tolist():
                values += "'" + str(data) + "'" + ', '
            cursor.execute(f"INSERT INTO test Values({values[:len(values) - 2]});")
        conn.commit()
        cursor.close()
        conn.close()


print("sad")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
